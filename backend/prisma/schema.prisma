// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  username String @unique
  password String

  isAdmin Int     @default(0)
  avatar  String?
  cover   String?

  posts    Post[]
  comments Comment[]
  likes    Like[]
  chats    ChatMember[]
  messages Message[]

  followers Followers[] @relation(name: "Followers")
  following Followers[] @relation(name: "Following")

  notifications     Notification[]
  sentNotifications Notification[] @relation(name: "Sender")
}

model Notification {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  senderId Int
  sender   User @relation(name: "Sender", fields: [senderId], references: [id], onDelete: Cascade)

  content String
  isRead  Boolean @default(false)
}

model Followers {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  userId Int
  user   User @relation(name: "Following", fields: [userId], references: [id], onDelete: Cascade)

  followerId Int
  follower   User @relation(name: "Followers", fields: [followerId], references: [id], onDelete: Cascade)

  @@unique([userId, followerId])
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorId Int
  author   User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  content String

  comments Comment[]
  likes    Like[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorId Int
  author   User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  postId Int
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  content String
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  postId Int
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

model Chat {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String

  members  ChatMember[]
  messages Message[]
}

model ChatMember {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  chatId Int
  chat   Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  isRead Boolean @default(false)

  @@unique([chatId, userId])
}

model Message {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chatId Int
  chat   Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)

  authorId Int
  author   User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  content String
  system  Boolean @default(false)
}
